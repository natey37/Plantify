app GardenMate {
  wasp: {
    version: "^0.9.0"
  },
  title: "Plantify",

  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    methods: {
      // We also support Google and GitHub, with more on the way!
      usernameAndPassword: {}
    },
    // We'll see how this is used a bit later
    onAuthFailedRedirectTo: "/login"
  }, 

  dependencies: [
    ("aws-sdk", "2.1345.0"),
    ("node-fetch", "3.3.1"), 
    ("@chakra-ui/react", "1.8.8"),
    ("@emotion/react", "11.10.6"),
    ("@emotion/styled", "11.10.6"),
    ("framer-motion", "6.5.1")
  ]
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage"
}

entity User {=psl
    id           Int           @id @default(autoincrement())
    username     String        @unique
    password     String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    plants       Plant[]
    notes        Note[]
    wateringTasks WateringTask[]
psl=}


//   const headers = [
//     "Species",
//     "Common Name",
//     "Light Requirements",
//     "Water Requirements",
//     "Watering Schedule",
//     "Soil Requirements",
//     "Fertilizer Requirements",
//     "Propagation",
//     "Pests and Diseases",
//     "Toxicity",
//     "Other",
//     "Notes",
//     "Fun Interesting Fact",
//     "Free Image", 
//   ];

entity Plant {=psl
  id               Int      @id @default(autoincrement())
  species         String?
  commonName      String?
  lightRequirements String?
  waterRequirements String?
  wateringSchedule String?
  soilRequirements String?
  fertilizerRequirements String?
  propagation String?
  pestsAndDiseases String?
  toxicity String?
  other String?
  note String?
  funInterestingFact String?
  // name             String
  categoryId       Int?
  imageUrl         String?
  // wateringFrequency String
  userId           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
  category         Category? @relation(fields: [categoryId], references: [id])
  notes            Note[]
  wateringTasks    WateringTask[]
psl=}

entity Category {=psl
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plants    Plant[]
psl=}

entity Note {=psl
  id        Int      @id @default(autoincrement())
  content   String
  plantId    Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  plant      Plant    @relation(fields: [plantId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
psl=}

entity WateringTask {=psl
  id         Int      @id @default(autoincrement())
  plantId    Int
  userId     Int
  dueDate    DateTime
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  plant      Plant    @relation(fields: [plantId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
psl=}


query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User]
}

query getPlants {
  fn: import { getPlants } from "@server/queries.js",
  entities: [Plant]
}

query getCategories {
  fn: import { getCategories } from "@server/queries.js",
  entities: [Category]
}

query getNotes {
  fn: import { getNotes } from "@server/queries.js",
  entities: [Note]
}

query getWateringTasks {
  fn: import { getWateringTasks } from "@server/queries.js",
  entities: [WateringTask]
}

action createPlant {
    fn: import { createPlant } from "@server/actions.js",
    entities: [Plant]
  }

action createCategory {
  fn: import { createCategory } from "@server/actions.js",
  entities: [Category]
}

action createNote {
  fn: import { createNote } from "@server/actions.js",
  entities: [Note]
}

action createWateringTask {
  fn: import { createWateringTask } from "@server/actions.js",
  entities: [WateringTask]
}

action updatePlant {
  fn: import { updatePlant } from "@server/actions.js",
  entities: [Plant]
}

action updateCategory {
  fn: import { updateCategory } from "@server/actions.js",
  entities: [Category]
}

action updateNote {
  fn: import { updateNote } from "@server/actions.js",
  entities: [Note]
}

action updateWateringTask {
  fn: import { updateWateringTask } from "@server/actions.js",
  entities: [WateringTask]
}

action deletePlant {
  fn: import { deletePlant } from "@server/actions.js",
  entities: [Plant]
}

action deleteCategory {
  fn: import { deleteCategory } from "@server/actions.js",
  entities: [Category]
}

action deleteNote {
  fn: import { deleteNote } from "@server/actions.js",
  entities: [Note]
}

action deleteWateringTask {
  fn: import { deleteWateringTask } from "@server/actions.js",
  entities: [WateringTask]
}

action generatePlantGpt3 {
  fn: import { generatePlantGpt3 } from "@server/actions.js",
}

action generateImageDalle {
  fn: import { generateImageDalle } from "@server/actions.js",
}
